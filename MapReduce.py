# The input reader parses a given table and for each line gives us a couple of line index and line values
def mapper(lineIndex, lineValues):
    mappedLine = []
    # Then we need to loop through the line values to map a key and a value to each cell
    for columnIndex, value in enumerate(lineValues):
        # for each value in the line, we put the column number as the Key
        K = columnIndex
        # and the couple (line number, value) as the value
        V = [lineIndex,value]
        # I did everything with arrays but I might be wrong
        mappedLine.append([K,V])

    # I'm not sure of what I should return exactly, but for testing purposes I returned the mapped line
    return mappedLine

# for example, with the input :
# 0, [4,8,7,9]
# 1, [5,2,4,8]
# 2, [3,6,7,5]

#  we obtain :
# [[0,[0,4]], [1,[0,8]], [2,[0,7]], [3,[0,9]]]
# [[0,[1,5]], [1,[1,2]], [2,[1,4]], [3,[1,8]]]
# [[0,[2,3]], [1,[2,6]], [2,[2,7]], [3,[2,5]]]

# Then the framework will shuffle and sort what the map method returned, and with the same example we will obtain :
# [[0,[0,4]], [0,[1,5]], [0,[2,3]]]
# [[1,[0,8]], [1,[1,2]], [1,[2,6]]]
# and so on..
# Our work is almost finished, in the reducer we just need to reconstruct the table,
# with the lines generated by shuffle and sort

# This is just some basic array manipulation
def reducer(shuffleAndSortedLine):
    outPutLine = []
    for value in shuffleAndSortedLine:
        outPutLine.append(value[1][1])

    return outPutLine

# With the input [[0,[0,4]], [0,[1,5]], [0,[2,3]]], we obtain [4,5,3] which is the first column of the table, this is
# what we wanted